#!/usr/bin/env bun

/**
 * Database Seed Script - Phoenix-inspired
 *
 * This script populates the database with development data.
 * Run automatically by db:setup and db:reset, or manually with db:seed
 *
 * Usage: bun run db:seed
 */

import { Effect, ConfigProvider } from "effect"
import { loadConfig } from "~/lib/config"

const seedDatabase = Effect.gen(function* () {
  console.log("🌱 Seeding database with development data...")

  // Load configuration
  const config = yield* loadConfig
  console.log(`   Environment: ${config.server.host}:${config.server.port}`)

  try {
    console.log("   Creating development users...")
    yield* createDevelopmentUsers()

    console.log("   Setting up demo couples...")
    yield* createDemoCouples()

    console.log("   Adding sample todos...")
    yield* createSampleTodos()

    console.log("   Ensuring BetterAuth keys exist...")
    console.log(
      "     ⚠️  JWT key check skipped (BetterAuth keys generated on first use)",
    )

    console.log("   ✅ Database seeded successfully")

    console.log("\n📊 Development Data Summary:")
    console.log("   • Users: Demo users for testing")
    console.log("   • Couples: Linked demo accounts")
    console.log("   • Todos: Sample tasks across timeline views")
    console.log("   • Auth: JWT keys for development")

    console.log("\n🎯 Test Accounts:")
    console.log("   • alice@example.com / password123")
    console.log("   • bob@example.com / password123")
    console.log("   • charlie@example.com / password123")
  } catch (error) {
    yield* Effect.fail(error)
  }
})

const createDevelopmentUsers = () =>
  Effect.succeed(
    (() => {
      const users = [
        "alice@example.com",
        "bob@example.com",
        "charlie@example.com",
      ]

      console.log("     Development users for testing:")
      for (const email of users) {
        console.log(`     • ${email} (password: password123)`)
      }

      console.log(
        "     Users can be created through the signup form at /sign-up",
      )
      console.log("     Or use existing test users if already created")
    })(),
  )

const createDemoCouples = () =>
  Effect.succeed(
    (() => {
      console.log("     Couples creation will be implemented with Phase 6")
      console.log("     For now, users can test individual todo management")
    })(),
  )

const createSampleTodos = () =>
  Effect.succeed(
    (() => {
      console.log(
        "     Todo creation will be implemented with Triplit in Phase 4",
      )
      console.log("     For now, focus on authentication flows")
    })(),
  )

// Commented out ensureBetterAuthKeys to prevent hanging
// This function was causing the script to hang due to BetterAuth connection not closing
// JWT keys are automatically generated by BetterAuth when needed

// const ensureBetterAuthKeys = () =>
//   Effect.gen(function* () {
//     try {
//       const jwks = yield* Effect.tryPromise(() => auth.api.getJwks()).pipe(
//         Effect.timeout("5 seconds"),
//         Effect.catchAll(() => Effect.succeed({ keys: [] }))
//       )
//
//       if (jwks.keys.length > 0) {
//         console.log(`     ✅ BetterAuth JWT keys exist (${jwks.keys.length} keys)`)
//       } else {
//         console.log("     ⚠️  No JWT keys found - they will be generated on first use")
//       }
//     } catch {
//       console.log("     ⚠️  Could not check JWT keys - they will be generated on first use")
//     }
//   })

// Main execution
const program = seedDatabase.pipe(
  Effect.withConfigProvider(ConfigProvider.fromEnv()),
  Effect.catchAll((error) =>
    Effect.gen(function* () {
      console.error(`\n❌ Seeding failed: ${error}`)
      console.error("\n🔧 Troubleshooting:")
      console.error("   • Ensure database is running and migrated")
      console.error("   • Check DATABASE_URL in .env file")
      console.error("   • Try: bun run db:test")
      console.error("   • Run: bun run db:setup (includes migration)")
      yield* Effect.fail(new Error("Database seeding failed"))
    }),
  ),
)

Effect.runPromise(program).catch(() => process.exit(1))
