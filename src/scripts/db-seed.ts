#!/usr/bin/env bun

/**
 * Database Seed Script - Phoenix-inspired
 *
 * This script populates the database with development data.
 * Run automatically by db:setup and db:reset, or manually with db:seed
 *
 * Usage: bun run db:seed
 */

import { Effect, ConfigProvider, Config } from "effect"
import { AutoDatabaseConfig } from "~/lib/database-naming"
import { Logger, LoggerLayer, aviationMessages } from "~/lib/logger-service"

// Phoenix-style database config with auto-naming
const loadDatabaseConfig = Effect.gen(function* () {
  const dbConfig = yield* AutoDatabaseConfig
  const environment = yield* Config.withDefault(
    Config.literal("development", "production", "test")("NODE_ENV"),
    "development" as const,
  )
  const host = yield* Config.withDefault(Config.string("HOST"), "localhost")
  const port = yield* Config.withDefault(Config.number("PORT"), 3000)

  return {
    database: dbConfig,
    server: { host, port },
    environment,
  }
})

const seedDatabase = Effect.gen(function* () {
  const logger = yield* Logger

  yield* logger.info(
    aviationMessages.starting("database seeding with development data"),
    {
      service: "database-seed",
      operation: "initialization",
    },
  )

  // Load configuration
  const config = yield* loadDatabaseConfig
  yield* logger.info(
    `Environment: ${config.server.host}:${config.server.port}`,
    {
      service: "database-seed",
      metadata: { environment: config.environment },
    },
  )

  try {
    yield* logger.info("Creating development users...", {
      service: "database-seed",
      operation: "create-users",
    })
    yield* createDevelopmentUsers()

    yield* logger.info("Setting up demo couples...", {
      service: "database-seed",
      operation: "create-couples",
    })
    yield* createDemoCouples()

    yield* logger.info("Adding sample todos...", {
      service: "database-seed",
      operation: "create-todos",
    })
    yield* createSampleTodos()

    yield* logger.info("Ensuring BetterAuth keys exist...", {
      service: "database-seed",
      operation: "ensure-auth-keys",
    })
    yield* logger.info(
      "     ⚠️  JWT key check skipped (BetterAuth keys generated on first use)",
    )

    yield* logger.success(aviationMessages.completing("Database seeding"), {
      service: "database-seed",
      operation: "completion",
    })

    yield* logger.info("Development Data Summary:", {
      service: "database-seed",
      metadata: {
        users: "Demo users for testing",
        couples: "Linked demo accounts",
        todos: "Sample tasks across timeline views",
        auth: "JWT keys for development",
      },
    })

    yield* logger.info("Test Accounts:", {
      service: "database-seed",
      metadata: {
        accounts: [
          "alice@example.com / password123",
          "bob@example.com / password123",
          "charlie@example.com / password123",
        ],
      },
    })
  } catch (error) {
    yield* Effect.fail(error)
  }
})

const createDevelopmentUsers = () =>
  Effect.gen(function* () {
    const logger = yield* Logger
    const users = [
      "alice@example.com",
      "bob@example.com",
      "charlie@example.com",
    ]

    yield* logger.info("Development users for testing:", {
      service: "database-seed",
      operation: "create-users",
      metadata: {
        users: users.map((email) => `${email} (password: password123)`),
        signupUrl: "/sign-up",
      },
    })

    yield* logger.info(
      "Users can be created through the signup form at /sign-up",
      {
        service: "database-seed",
        operation: "create-users",
      },
    )
    yield* logger.info("Or use existing test users if already created", {
      service: "database-seed",
      operation: "create-users",
    })
  })

const createDemoCouples = () =>
  Effect.gen(function* () {
    const logger = yield* Logger
    yield* logger.info("Couples creation will be implemented with Phase 6", {
      service: "database-seed",
      operation: "create-couples",
    })
    yield* logger.info("For now, users can test individual todo management", {
      service: "database-seed",
      operation: "create-couples",
    })
  })

const createSampleTodos = () =>
  Effect.gen(function* () {
    const logger = yield* Logger
    yield* logger.info(
      "Todo creation will be implemented with Triplit in Phase 4",
      {
        service: "database-seed",
        operation: "create-todos",
      },
    )
    yield* logger.info("For now, focus on authentication flows", {
      service: "database-seed",
      operation: "create-todos",
    })
  })

// Commented out ensureBetterAuthKeys to prevent hanging
// This function was causing the script to hang due to BetterAuth connection not closing
// JWT keys are automatically generated by BetterAuth when needed

// const ensureBetterAuthKeys = () =>
//   Effect.gen(function* () {
//     try {
//       const jwks = yield* Effect.tryPromise(() => auth.api.getJwks()).pipe(
//         Effect.timeout("5 seconds"),
//         Effect.catchAll(() => Effect.succeed({ keys: [] }))
//       )
//
//       if (jwks.keys.length > 0) {
//         console.log(`     ✅ BetterAuth JWT keys exist (${jwks.keys.length} keys)`)
//       } else {
//         console.log("     ⚠️  No JWT keys found - they will be generated on first use")
//       }
//     } catch {
//       console.log("     ⚠️  Could not check JWT keys - they will be generated on first use")
//     }
//   })

// Main execution
const program = seedDatabase.pipe(
  Effect.provide(LoggerLayer),
  Effect.withConfigProvider(ConfigProvider.fromEnv()),
  Effect.catchAll((error) =>
    Effect.gen(function* () {
      const logger = yield* Logger
      yield* logger.error(`Seeding failed: ${error}`, {
        service: "database-seed",
        operation: "failure",
        metadata: { error: String(error) },
      })
      yield* logger.error("Troubleshooting:", {
        service: "database-seed",
        metadata: {
          steps: [
            "Ensure database is running and migrated",
            "Check DATABASE_URL in .env file",
            "Try: bun run db:test",
            "Run: bun run db:setup (includes migration)",
          ],
        },
      })
      yield* Effect.fail(new Error("Database seeding failed"))
    }).pipe(Effect.provide(LoggerLayer)),
  ),
)

Effect.runPromise(program).catch(() => process.exit(1))
